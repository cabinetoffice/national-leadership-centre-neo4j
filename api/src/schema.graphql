directive @cypher(statement: String) on FIELD_DEFINITION
directive @relation(
  name: String
  direction: _RelationDirections
  from: String
  to: String
) on FIELD_DEFINITION | OBJECT
directive @additionalLabels(labels: [String]) on OBJECT
directive @MutationMeta(
  relationship: String
  from: String
  to: String
) on FIELD_DEFINITION
directive @neo4j_ignore on FIELD_DEFINITION
type _AddOrganisationAreaServedPayload {
  from: Organisation
  to: AdministrativeArea
}

type _AddOrganisationEmployeePayload {
  from: Organisation
  to: Person
}

type _AddOrganisationRoleAdditionalTypePayload {
  from: OrganisationRole
  to: OrganisationRole
}

type _AddOrganisationSectorPayload {
  from: Organisation
  to: Sector
}

type _AddPersonJobTitlePayload {
  from: Person
  to: OrganisationRole
}

type _AddPersonWorksForPayload {
  from: Person
  to: Organisation
}

input _AdministrativeAreaFilter {
  AND: [_AdministrativeAreaFilter!]
  OR: [_AdministrativeAreaFilter!]
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
}

input _AdministrativeAreaInput {
  id: Int!
}

enum _AdministrativeAreaOrdering {
  id_asc
  id_desc
  label_asc
  label_desc
  _id_asc
  _id_desc
}

type _Neo4jDate {
  year: Int
  month: Int
  day: Int
  formatted: String
}

input _Neo4jDateInput {
  year: Int
  month: Int
  day: Int
  formatted: String
}

type _Neo4jDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

type _Neo4jLocalDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jLocalTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jTimeInput {
  hour: Int
  minute: Int
  second: Int
  nanosecond: Int
  millisecond: Int
  microsecond: Int
  timezone: String
  formatted: String
}

input _OrganisationFilter {
  AND: [_OrganisationFilter!]
  OR: [_OrganisationFilter!]
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
}

input _OrganisationInput {
  id: Int!
}

enum _OrganisationOrdering {
  id_asc
  id_desc
  label_asc
  label_desc
  _id_asc
  _id_desc
}

input _OrganisationRoleFilter {
  AND: [_OrganisationRoleFilter!]
  OR: [_OrganisationRoleFilter!]
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  roleName: String
  roleName_not: String
  roleName_in: [String!]
  roleName_not_in: [String!]
  roleName_contains: String
  roleName_not_contains: String
  roleName_starts_with: String
  roleName_not_starts_with: String
  roleName_ends_with: String
  roleName_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
}

input _OrganisationRoleInput {
  id: Int!
}

enum _OrganisationRoleOrdering {
  id_asc
  id_desc
  name_asc
  name_desc
  roleName_asc
  roleName_desc
  type_asc
  type_desc
  _id_asc
  _id_desc
}

input _PersonFilter {
  AND: [_PersonFilter!]
  OR: [_PersonFilter!]
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
}

input _PersonInput {
  id: String!
}

enum _PersonOrdering {
  id_asc
  id_desc
  label_asc
  label_desc
  title_asc
  title_desc
  firstName_asc
  firstName_desc
  lastName_asc
  lastName_desc
  fullName_asc
  fullName_desc
  _id_asc
  _id_desc
}

enum _RelationDirections {
  IN
  OUT
}

type _RemoveOrganisationAreaServedPayload {
  from: Organisation
  to: AdministrativeArea
}

type _RemoveOrganisationEmployeePayload {
  from: Organisation
  to: Person
}

type _RemoveOrganisationRoleAdditionalTypePayload {
  from: OrganisationRole
  to: OrganisationRole
}

type _RemoveOrganisationSectorPayload {
  from: Organisation
  to: Sector
}

type _RemovePersonJobTitlePayload {
  from: Person
  to: OrganisationRole
}

type _RemovePersonWorksForPayload {
  from: Person
  to: Organisation
}

input _SectorFilter {
  AND: [_SectorFilter!]
  OR: [_SectorFilter!]
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
}

input _SectorInput {
  id: Int!
}

enum _SectorOrdering {
  id_asc
  id_desc
  label_asc
  label_desc
  _id_asc
  _id_desc
}

type Mutation {
  CreateOrganisation(id: Int, label: String): Organisation
  UpdateOrganisation(id: Int!, label: String): Organisation
  DeleteOrganisation(id: Int!): Organisation
  CreatePerson(
    id: String
    label: String
    title: String
    firstName: String
    lastName: String
    fullName: String
  ): Person
  UpdatePerson(
    id: String!
    label: String
    title: String
    firstName: String
    lastName: String
    fullName: String
  ): Person
  DeletePerson(id: String!): Person
  AddOrganisationEmployee(
    from: _OrganisationInput!
    to: _PersonInput!
  ): _AddOrganisationEmployeePayload
  RemoveOrganisationEmployee(
    from: _OrganisationInput!
    to: _PersonInput!
  ): _RemoveOrganisationEmployeePayload
  AddPersonWorksFor(
    from: _PersonInput!
    to: _OrganisationInput!
  ): _AddPersonWorksForPayload
  RemovePersonWorksFor(
    from: _PersonInput!
    to: _OrganisationInput!
  ): _RemovePersonWorksForPayload
  AddPersonJobTitle(
    from: _PersonInput!
    to: _OrganisationRoleInput!
  ): _AddPersonJobTitlePayload
  RemovePersonJobTitle(
    from: _PersonInput!
    to: _OrganisationRoleInput!
  ): _RemovePersonJobTitlePayload
  CreateOrganisationRole(
    id: Int
    name: String
    roleName: String
    type: String
  ): OrganisationRole
  UpdateOrganisationRole(
    id: Int!
    name: String
    roleName: String
    type: String
  ): OrganisationRole
  DeleteOrganisationRole(id: Int!): OrganisationRole
  AddOrganisationRoleAdditionalType(
    from: _OrganisationRoleInput!
    to: _OrganisationRoleInput!
  ): _AddOrganisationRoleAdditionalTypePayload
  RemoveOrganisationRoleAdditionalType(
    from: _OrganisationRoleInput!
    to: _OrganisationRoleInput!
  ): _RemoveOrganisationRoleAdditionalTypePayload
  AddOrganisationAreaServed(
    from: _OrganisationInput!
    to: _AdministrativeAreaInput!
  ): _AddOrganisationAreaServedPayload
  RemoveOrganisationAreaServed(
    from: _OrganisationInput!
    to: _AdministrativeAreaInput!
  ): _RemoveOrganisationAreaServedPayload
  AddOrganisationSector(
    from: _OrganisationInput!
    to: _SectorInput!
  ): _AddOrganisationSectorPayload
  RemoveOrganisationSector(
    from: _OrganisationInput!
    to: _SectorInput!
  ): _RemoveOrganisationSectorPayload
  CreateAdministrativeArea(id: Int, label: String): AdministrativeArea
  UpdateAdministrativeArea(id: Int!, label: String): AdministrativeArea
  DeleteAdministrativeArea(id: Int!): AdministrativeArea
  CreateSector(id: Int, label: String): Sector
  UpdateSector(id: Int!, label: String): Sector
  DeleteSector(id: Int!): Sector
}

type Organisation {
  id: Int
  label: String
  _id: String
  employee(
    first: Int
    offset: Int
    orderBy: [_PersonOrdering]
    filter: _PersonFilter
  ): [Person] @relation(name: "employee", direction: OUT)
  areaServed(
    first: Int
    offset: Int
    orderBy: [_AdministrativeAreaOrdering]
    filter: _AdministrativeAreaFilter
  ): [AdministrativeArea] @relation(name: "areaServed", direction: OUT)
  sector(
    first: Int
    offset: Int
    orderBy: [_SectorOrdering]
    filter: _SectorFilter
  ): [Sector] @relation(name: "hasSector", direction: OUT)
}

type OrganisationRole {
  id: Int
  name: String
  roleName: String
  type: String
  additionalType(
    first: Int
    offset: Int
    orderBy: [_OrganisationRoleOrdering]
    filter: _OrganisationRoleFilter
  ): [OrganisationRole] @relation(name: "typeOf", direction: OUT)
}

type Person {
  id: String
  label: String
  title: String
  firstName: String
  lastName: String
  fullName: String
  worksFor(
    first: Int
    offset: Int
    orderBy: [_OrganisationOrdering]
    filter: _OrganisationFilter
  ): [Organisation] @relation(name: "worksFor", direction: OUT)
  jobTitle(
    first: Int
    offset: Int
    orderBy: [_OrganisationRoleOrdering]
    filter: _OrganisationRoleFilter
  ): [OrganisationRole] @relation(name: "hasOccupation", direction: OUT)
}

type AdministrativeArea {
  id: Int
  label: String
  _id: String
}

type Sector {
  id: Int
  label: String
  _id: String
}

type Query {
  Organisation(
    id: Int
    label: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_OrganisationOrdering]
    filter: _OrganisationFilter
  ): [Organisation]
  Person(
    id: String
    label: String
    title: String
    firstName: String
    lastName: String
    fullName: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_PersonOrdering]
    filter: _PersonFilter
  ): [Person]
  OrganisationRole(
    id: Int
    name: String
    roleName: String
    type: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_OrganisationRoleOrdering]
    filter: _OrganisationRoleFilter
  ): [OrganisationRole]
}

